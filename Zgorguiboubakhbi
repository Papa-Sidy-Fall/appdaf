UID=1000
GID=1000

DB_DRIVER=pgsql
DB_HOST=db
DB_PORT=5434
PGPORT=5434
DB_NAME=appdaf
DB_USERNAME=papasidy
DB_USER=papasidy
DB_PASSWORD=admin123

DSN="pgsql:host=db;dbname=appdaf;port=5434"

PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=admin123

--------------------------------------------
seeder.php

<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Cloudinary\Cloudinary;
use Cloudinary\Configuration\Configuration;
use Dotenv\Dotenv;

$cloud = require __DIR__ . '/../app/config/cloudinary.php';

Configuration::instance([
    'cloud' => [
        'cloud_name' => $cloud['cloud_name'],
        'api_key'    => $cloud['api_key'],
        'api_secret' => $cloud['api_secret'],
    ],
    'url' => ['secure' => true]
]);

$cloudinary = new Cloudinary(Configuration::instance());

$dotenv = Dotenv::createImmutable(__DIR__ . '/../');
$dotenv->load();

$dsn = $_ENV['DSN'];
$user = $_ENV['DB_USERNAME'];
$password = $_ENV['DB_PASSWORD'];

try {
    echo "🔗 Connexion à la base...\n";
    $pdo = new PDO($dsn, $user, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    echo "✅ Connexion réussie à la base de données\n\n";

    $pdo->exec("DELETE FROM log;");
    $pdo->exec("DELETE FROM citoyen;");
    echo "♻️  Tables `citoyen` et `log` vidées avec succès.\n\n";

    $citoyens = [
        [
            'nom' => 'Gueye',
            'prenom' => 'Ramatoulaye',
            'date_naissance' => '1995-01-02',
            'lieu_naissance' => 'Dakar',
            'cni' => 'CNI1090',
            'recto' => 'cni_recto_url.png',
            'verso' => 'cni_verso_url.png'
        ],
        [
            'nom' => 'Ndour',
            'prenom' => 'Moussa',
            'date_naissance' => '1998-05-11',
            'lieu_naissance' => 'Thiès',
            'cni' => 'CNI1002',
            'recto' => 'cni_recto_url.png',
            'verso' => 'cni_verso_url.png'
        ],
        [
            'nom' => 'Fall',
            'prenom' => 'Cheikh',
            'date_naissance' => '1990-01-15',
            'lieu_naissance' => 'Saint-Louis',
            'cni' => 'CNI1003',
            'recto' => 'cni_recto_url.png',
            'verso' => 'cni_verso_url.png'
        ],
    ];

    foreach ($citoyens as $citoyen) {
        try {
            $pathRecto = __DIR__ . '/images/' . $citoyen['recto'];
            $pathVerso = __DIR__ . '/images/' . $citoyen['verso'];

            echo "📤 Upload recto pour {$citoyen['nom']}...\n";
            $urlRecto = $cloudinary->uploadApi()->upload($pathRecto, ['folder' => 'cni/recto'])['secure_url'];

            echo "📤 Upload verso pour {$citoyen['nom']}...\n";
            $urlVerso = $cloudinary->uploadApi()->upload($pathVerso, ['folder' => 'cni/verso'])['secure_url'];

            $stmt = $pdo->prepare("
                INSERT INTO citoyen (nom, prenom, date_naissance, lieu_naissance, cni, cni_recto_url, cni_verso_url)
                VALUES (:nom, :prenom, :date_naissance, :lieu_naissance, :cni, :cni_recto_url, :cni_verso_url)
            ");

            $stmt->execute([
                'nom' => $citoyen['nom'],
                'prenom' => $citoyen['prenom'],
                'date_naissance' => $citoyen['date_naissance'],
                'lieu_naissance' => $citoyen['lieu_naissance'],
                'cni' => $citoyen['cni'],
                'cni_recto_url' => $urlRecto,
                'cni_verso_url' => $urlVerso
            ]);

            echo "✅ {$citoyen['nom']} inséré avec succès.\n\n";
        } catch (Exception $e) {
            echo "❌ Erreur lors de l'insertion de {$citoyen['nom']} : " . $e->getMessage() . "\n";
        }
    }

    // Insertion logs
    $pdo->exec("
        INSERT INTO log (date, heure, localisation, ip_address, statut) VALUES
        ('2025-07-21', '14:30:00', 'Dakar - Plateau', '192.168.1.10', 'SUCCES'),
        ('2025-07-21', '15:45:12', 'Thiès - Grand Standing', '192.168.1.11', 'ERROR'),
        ('2025-07-20', '09:15:05', 'Saint-Louis - Centre-ville', '10.0.0.1', 'SUCCES');
    ");

    echo "✅ Logs insérés avec succès.\n";
    echo "🎉 Seeder terminé.\n";

} catch (PDOException $e) {
    echo "❌ Erreur PDO : " . $e->getMessage() . "\n";
}

---------------------------------------
migration.php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

function prompt(string $message): string {
    echo $message;
    return trim(fgets(STDIN));
}

function writeEnv(array $config): void {
    $envPath = __DIR__ . '/../.env';
    $env = <<<ENV
DB_DRIVER={$config['driver']}
DB_HOST={$config['host']}
DB_PORT={$config['port']}
DB_NAME={$config['dbname']}
DB_USERNAME={$config['user']}
DB_PASSWORD={$config['pass']}
DSN="{$config['driver']}:host={$config['host']};dbname={$config['dbname']};port={$config['port']}"
ENV;

    file_put_contents($envPath, $env);
    echo ".env généré/mis à jour avec succès.\n";
}

// Valeurs par défaut adaptées à l'environnement Docker
$driver = strtolower(prompt("Quel SGBD utiliser ? (mysql / pgsql) : "));
$host = prompt("Hôte (default: db) : ") ?: "db";
$port = prompt("Port (default: 3306 ou 5434) : ") ?: ($driver === 'pgsql' ? "5434" : "3306");
$user = prompt("Utilisateur (default: root/papasidy) : ") ?: ($driver === 'pgsql' ? "papasidy" : "root");
$pass = prompt("Mot de passe : ");
$dbName = prompt("Nom de la base à créer : ");

try {
    // Connexion sans base pour pouvoir en créer une
    $dsn = "$driver:host=$host;port=$port";
    if ($driver === 'pgsql') {
        $dsn .= ";dbname=postgres";
    }

    $pdo = new PDO($dsn, $user, $pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    if ($driver === 'pgsql') {
        $check = $pdo->query("SELECT 1 FROM pg_database WHERE datname = '$dbName'")->fetch();
        if (!$check) {
            $pdo->exec("CREATE DATABASE \"$dbName\"");
            echo "✅ Base PostgreSQL `$dbName` créée.\n";
        } else {
            echo "ℹ️ Base PostgreSQL `$dbName` déjà existante.\n";
        }
    } elseif ($driver === 'mysql') {
        $pdo->exec("CREATE DATABASE IF NOT EXISTS `$dbName` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
        echo "✅ Base MySQL `$dbName` créée ou existante.\n";
    } else {
        die("❌ SGBD non supporté\n");
    }

    // 🔄 Connexion à la base cible
    $dsnDb = "$driver:host=$host;port=$port;dbname=$dbName";
    $pdo = new PDO($dsnDb, $user, $pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // 📦 Création des tables
    $tables = [];

    if ($driver === 'pgsql') {
        $tables = [
            "CREATE TABLE IF NOT EXISTS citoyen (
                id SERIAL PRIMARY KEY,
                nom VARCHAR(100) NOT NULL,
                prenom VARCHAR(100) NOT NULL,
                date_naissance DATE NOT NULL,
                lieu_naissance VARCHAR(150) NOT NULL,
                cni VARCHAR(20) UNIQUE NOT NULL,
                cni_recto_url TEXT NOT NULL,
                cni_verso_url TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );",
            "CREATE INDEX IF NOT EXISTS idx_citoyen_cni ON citoyen(cni);",
            "CREATE TABLE IF NOT EXISTS log (
                id SERIAL PRIMARY KEY,
                date DATE NOT NULL,
                heure TIME NOT NULL,
                localisation VARCHAR(255) NOT NULL,
                ip_address VARCHAR(45) NOT NULL,
                statut VARCHAR(10) CHECK (statut IN ('SUCCES', 'ERROR')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );"
        ];
    } else {
        $tables = [
            "CREATE TABLE IF NOT EXISTS citoyen (
                id INT AUTO_INCREMENT PRIMARY KEY,
                nom VARCHAR(100) NOT NULL,
                prenom VARCHAR(100) NOT NULL,
                date_naissance DATE NOT NULL,
                lieu_naissance VARCHAR(150) NOT NULL,
                cni VARCHAR(20) UNIQUE NOT NULL,
                cni_recto_url TEXT NOT NULL,
                cni_verso_url TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB;",
            "CREATE INDEX idx_citoyen_cni ON citoyen(cni);",
            "CREATE TABLE IF NOT EXISTS log (
                id INT AUTO_INCREMENT PRIMARY KEY,
                date DATE NOT NULL,
                heure TIME NOT NULL,
                localisation VARCHAR(255) NOT NULL,
                ip_address VARCHAR(45) NOT NULL,
                statut ENUM('SUCCES', 'ERROR') NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB;"
        ];
    }

    foreach ($tables as $sql) {
        $pdo->exec($sql);
    }

    echo "✅ Tables `citoyen` et `log` créées avec succès.\n";

    writeEnv([
        'driver' => $driver,
        'host'   => $host,
        'port'   => $port,
        'user'   => $user,
        'pass'   => $pass,
        'dbname' => $dbName
    ]);

} catch (Exception $e) {
    echo "❌ Erreur : " . $e->getMessage() . "\n";
}
-----------------------------------
deployement sur render

# UID=1000
# GID=1000
DB_DRIVE=pgsql
DB_HOST=dpg-d2102ommcj7s73e8qnog-a.oregon-postgres.render.com
DB_PORT=5432
# PGPORT=5434
DB_NAME=postgres_fybi
DB_USERNAME=postgres_fybi_user
# DB_USER=papasidy
DB_PASSWORD=LR5SxrkbualE8lJPaErb3D35ePdemOOR
# PGADMIN_DEFAULT_EMAIL=admin@admin.com
# PGADMIN_DEFAULT_PASSWORD=admin123
METHODE_INSTANCE_NAME=getInstance
